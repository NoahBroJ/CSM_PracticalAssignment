// Open the file that defines the type "expr" we shall use as AST
%{
open TypesAST
%}
// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token <bool> TRUE FALSE
%token TIMES DIV PLUS MINUS POW LPAR RPAR ASSIGN SKIP SEMICOLON IF FI DO OD PRED LBRA RBRA AND OR NEG EQ GT LT EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
//%left PLUS MINUS
//%left TIMES DIV
%right CHOICE SEMICOLON


// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <expr> start
%type <expr> expression
%type <expr> factor
%type <expr> power
%type <expr> unary
%type <expr> num

// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: expression EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
// GC ::= b -> C | GC [] GC
// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
// b ::= true | false | b & b | b | b | b && b | b || b | !b
//			  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:

expression:
	| factor						{ $1 }
	| expression PLUS factor	    { Plus($1,$3) }
	| expression MINUS factor	    { Minus($1,$3) }

factor:
	| power							{ $1 }
	| factor TIMES power		    { Times($1,$3) }
	| factor DIV power				{ Div($1,$3) }

power:
	| unary							{ $1 }
	| unary POW power			    { Pow($1,$3) }

unary:
	| num							{ $1 }
	| PLUS unary		            { UPlus($2) }
	| MINUS unary			        { UMinus($2) }

num:
	| NUM							{ Num($1) }
	| LPAR expression RPAR			{ $2 }

bool:
	| andbool						{ $1 }
	| bool OR andbool				{ Or1($1, $3) }
	| bool OR OR andbool			{ Or2($1, $4) }

andbool:
	| notbool						{ $1 }
	| andbool AND notbool			{ And1($1, $3) }
	| andbool AND AND notbool		{ And2($1, $4) }

notbool
	| basebool						{ $1 }
	| NEG basebool					{ NEG($2) }

basebool
	| TRUE							{ T($1) }
	| FALSE							{ T($1) }
	| LPAR bool RPAR				{ $2 }
	| expression EQ expression		{ EQ($1, $3) }
	| expression NEG EQ expression	{ NEQ($1, $4) }
	| expression GT expression		{ GT($1, $3) }
	| expression GT EQ expression	{ GEQ($1, $4) }
	| expression LT expression		{ LT($1, $3) }
	| expression LT EQ expression	{ LEQ($1, $4) }

guardedcommand
	| bool PRED command				{ Pred($1, $3) }
	| guardedcommand LBRA RBRA guardedcommand { Choice($1, $4) }

command
	| var ASSIGN expression			{ Assign($1, $3) }
	| var LBRA expression RBRA ASSIGN expression	{ ArrAssign($1, $3, $6) }
	| SKIP							{ Skip }
	| command SEMICOLON command		{ SemiColon($1, $3) }
	| IF guardedcommand FI			{ Iffi($2) }
	| DO guardedcommand OD			{ Dood($2) }

var
	| VAR							{ Var($1) }


// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)

%%
