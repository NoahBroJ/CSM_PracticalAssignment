// The generated lexer module will start with this code
{
module Lexer
open FSharp.Text.Lexing
open System
// open the module that defines the tokens
open Parser
// Set the language to English such that 4.0 is parsed as 4 and not 40.
System.Globalization.CultureInfo.CurrentCulture <- new System.Globalization.CultureInfo("en-US")
}



// We define macros for some regular expressions we will use later
let digit       = ['0'-'9']
let num         = digit+
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let letter		= ['a'-'z'] | ['A'-'Z']
let var			= letter (letter | digit | '_')*
let if			= "if" (whitespace | newline)+
let fi			= (whitespace | newline)+ "fi"
let do			= "do" (whitespace | newline)+
let od			= (whitespace | newline)+ "od"


// We define now the rules for recognising and building tokens
// for each of the tokens of our language we need a rule
// NOTE: rules are applied in order top-down.
//       This is important when tokens overlap (not in this example)
rule tokenize = parse
// deal with tokens that need to be ignored (skip them)
| whitespace    { tokenize lexbuf }
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }
// deal with tokens that need to be built
| num           { NUM(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| '*'           { TIMES }
| '/'           { DIV }
| '+'           { PLUS }
| '-'           { MINUS }
| '^'           { POW }
| '('           { LPAR }
| ')'           { RPAR }
| ":="			{ ASSIGN }
| "skip"		{ SKIP }
| ';'			{ SEMICOLON }
| if			{ IF }
| fi			{ FI }
| do			{ DO }
| od			{ OD }
| "->"			{ PRED }
| '['			{ LBRA }
| ']'			{ RBRA }
| var			{ VAR(LexBuffer<_>.LexemeString lexbuf) }
| "true"		{ TRUE(LexBuffer<_>.LexemeString lexbuf) }
| "false"		{ FALSE(LexBuffer<_>.LexemeString lexbuf) }
| '&'			{ AND }
| '|'			{ OR }
| '!'			{ NOT }
| '='			{ EQUAL }
| '>'			{ GREATER }
| '<'			{ LESS }
| eof           { EOF }

// C ::= x := a | A[a] := a | skip | C ; C | if GC fi | do GC od
// GC ::= b -> C | GC [] GC
// a ::= n | x | A[a] | a + a | a - a | a * a | a / a | - a | a ^ a | (a)
// b ::= true | false | b & b | b | b | b && b | b || b | !b
//			  | a = a | a != a | a > a | a >= a | a < a | a <= a | (b)
